import psycopg2
from psycopg2.extensions import ISOLATION_LEVEL_AUTOCOMMIT

def create_databases(n, user, password, host='localhost', port=5432):
    # K·∫øt n·ªëi server postgres (kh√¥ng k·∫øt n·ªëi database c·ª• th·ªÉ)
    conn = psycopg2.connect(database='postgres', user=user, password=password, host=host, port=port)
    conn.set_isolation_level(ISOLATION_LEVEL_AUTOCOMMIT)  # ƒë·ªÉ t·∫°o db c·∫ßn autocommit
    cur = conn.cursor()

    for i in range(1, n + 1):
        db_name = f'admake_{i}'
        try:
            cur.execute(f'CREATE DATABASE {db_name};')
            print(f"Database {db_name} created successfully.")
        except psycopg2.errors.DuplicateDatabase:
            print(f"Database {db_name} already exists. Skipping.")
        except Exception as e:
            print(f"Error creating database {db_name}: {e}")

    cur.close()
    conn.close()

def create_database(n, host):
    import subprocess

    USER = "postgres"
    PORT = "5432"
    SCHEMA_FILE = "schema.sql"  # file schema n·∫±m tr√™n VPS

    for i in range(1, n + 1):
        DB_NAME = f"admake_{i}"
        print(f"\nüöÄ ƒêang x·ª≠ l√Ω database: {DB_NAME}")

        # 0Ô∏è‚É£ Ng·∫Øt k·∫øt n·ªëi v√† x√≥a database n·∫øu c√≥
        drop_connections = (
            f'psql -U {USER} -h {host} -p {PORT} -d postgres '
            f'-c "SELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE datname = \'{DB_NAME}\';"'
        )
        subprocess.run(drop_connections, shell=True, check=False)

        drop_db_cmd = (
            f'psql -U {USER} -h {host} -p {PORT} -d postgres '
            f'-c "DROP DATABASE IF EXISTS {DB_NAME};"'
        )
        subprocess.run(drop_db_cmd, shell=True, check=False)
        print(f"üóëÔ∏è  ƒê√£ x√≥a database (n·∫øu t·ªìn t·∫°i): {DB_NAME}")

        # 1Ô∏è‚É£ T·∫°o database m·ªõi
        create_db_cmd = (
            f'psql -U {USER} -h {host} -p {PORT} -d postgres '
            f'-c "CREATE DATABASE {DB_NAME};"'
        )
        subprocess.run(create_db_cmd, shell=True, check=True)
        print(f"‚úÖ ƒê√£ t·∫°o m·ªõi database: {DB_NAME}")

        # 2Ô∏è‚É£ Import schema v√†o database m·ªõi
        import_cmd = (
            f'psql -U {USER} -h {host} -p {PORT} -d {DB_NAME} -f {SCHEMA_FILE}'
        )
        try:
            subprocess.run(import_cmd, shell=True, check=True)
            print(f"üì¶ Import schema t·ª´ {SCHEMA_FILE} v√†o {DB_NAME} th√†nh c√¥ng!")
        except subprocess.CalledProcessError:
            print(f"‚ùå L·ªói khi import schema v√†o {DB_NAME}. Ki·ªÉm tra file {SCHEMA_FILE} tr√™n VPS.")




if __name__ == '__main__':
    # create_databases(
    #     n=10,
    #     user='postgres',
    #     password='mypassword',
    #     host='31.97.76.62',
    #     port=5432
    # )

    create_database(10, host='31.97.76.62')
